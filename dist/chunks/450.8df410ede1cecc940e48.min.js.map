{"version":3,"file":"chunks/450.8df410ede1cecc940e48.min.js","mappings":"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","sources":["webpack://@patternslib/patterns-dist/./node_modules/@patternslib/pat-tiptap/src/tiptap.js"],"sourcesContent":["import Base from \"@patternslib/patternslib/src/core/base\";\nimport Parser from \"@patternslib/patternslib/src/core/parser\";\nimport Registry from \"@patternslib/patternslib/src/core/registry\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport logging from \"@patternslib/patternslib/src/core/logging\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nexport const log = logging.getLogger(\"tiptap\");\n\nexport const parser = new Parser(\"tiptap\");\nparser.addArgument(\"collaboration-server\", null);\nparser.addArgument(\"collaboration-document\", null);\n\nparser.addArgument(\"toolbar-external\", null);\n\nparser.addArgument(\"image-panel\", null);\nparser.addArgument(\"embed-panel\", null);\nparser.addArgument(\"link-panel\", null);\nparser.addArgument(\"source-panel\", null);\n\nparser.addArgument(\"link-menu\", null);\nparser.addArgument(\"mentions-menu\", null);\nparser.addArgument(\"tags-menu\", null);\n\n// TODO: Remove with next major version.\n// BBB - Compatibility aliases\nparser.addAlias(\"context-menu-link\", \"link-menu\");\nparser.addAlias(\"context-menu-mentions\", \"mentions-menu\");\nparser.addAlias(\"context-menu-tags\", \"tags-menu\");\n\nexport default Base.extend({\n    name: \"tiptap\",\n    trigger: \".pat-tiptap\",\n\n    async init() {\n        // Constructor\n        this.toolbar_el = null;\n\n        const TipTap = (await import(\"@tiptap/core\")).Editor;\n        const ExtDocument = (await import(\"@tiptap/extension-document\")).default;\n        const ExtParagraph = (await import(\"@tiptap/extension-paragraph\")).default;\n        const ExtText = (await import(\"@tiptap/extension-text\")).default;\n\n        this.focus_handler = (await import(\"./focus-handler\")).focus_handler;\n\n        this.options = parser.parse(this.el, this.options);\n\n        // Hide element which will be replaced with tiptap instance\n        this.el.style.display = \"none\";\n        // Create container for tiptap\n        const container = document.createElement(\"div\");\n        container.setAttribute(\"class\", \"tiptap-container\");\n        this.el.after(container);\n\n        // Support for pat-autofocus and autofocus: Set focus depending on textarea's focus setting.\n        const set_focus =\n            this.el.classList.contains(\"pat-autofocus\") ||\n            this.el.hasAttribute(\"autofocus\");\n\n        const is_form_el = [\"TEXTAREA\", \"INPUT\"].includes(this.el.tagName);\n\n        const getText = () => {\n            // Textarea value getter\n            return is_form_el ? this.el.value : this.el.innerHTML;\n        };\n\n        const setText = (text) => {\n            // Textarea value setter\n            if (is_form_el) {\n                this.el.value = text;\n            } else {\n                this.el.innerHTML = text;\n            }\n            this.el.dispatchEvent(events.input_event());\n        };\n\n        const extra_extensions = [\n            // Allow non-paragraph line-breaks by default.\n            (await import(\"@tiptap/extension-hard-break\")).default.configure(),\n            // Gapcursor for images, tables etc to be able to add content below/above.\n            (await import(\"@tiptap/extension-gapcursor\")).Gapcursor.configure(),\n            // Allways include undo/redo support via keyboard shortcuts.\n            (await import(\"@tiptap/extension-history\")).History.configure(),\n        ];\n        const placeholder = this.el.getAttribute(\"placeholder\");\n        if (placeholder) {\n            extra_extensions.push(\n                (await import(\"@tiptap/extension-placeholder\")).Placeholder.configure({\n                    placeholder: placeholder,\n                })\n            );\n        }\n\n        // Mentions extension\n        if (this.options.mentionsMenu) {\n            extra_extensions.push(\n                (await import(\"./extensions/suggestion\"))\n                    .factory({\n                        app: this,\n                        name: \"mention\",\n                        char: \"@\",\n                        plural: \"mentions\",\n                    })\n                    .configure({\n                        url: this.options.mentionsMenu,\n                    })\n            );\n        }\n\n        // Tags extension\n        if (this.options.tagsMenu) {\n            extra_extensions.push(\n                (await import(\"./extensions/suggestion\"))\n                    .factory({\n                        app: this,\n                        name: \"tag\",\n                        char: \"#\",\n                        plural: \"tags\",\n                    })\n                    .configure({\n                        url: this.options.tagsMenu,\n                    })\n            );\n        }\n\n        this.toolbar_el = this.options.toolbarExternal\n            ? document.querySelector(this.options.toolbarExternal)\n            : null;\n        if (this.toolbar_el) {\n            const focus_handler_targets = (await import(\"./focus-handler\")).TARGETS; // prettier-ignore\n            focus_handler_targets.push(this.toolbar_el); // We register the focus handler on itself.\n            this.focus_handler(this.toolbar_el);\n        }\n\n        const toolbar_ext = await import(\"./toolbar\");\n        this.toolbar = toolbar_ext.init_pre({ app: this });\n        this.editor = new TipTap({\n            element: container,\n            extensions: [\n                ExtDocument,\n                ExtText,\n                ExtParagraph,\n                ...(await toolbar_ext.init_extensions({ app: this })),\n                ...extra_extensions,\n            ],\n            content: getText(),\n            onUpdate() {\n                // Note: ``this`` is the editor instance.\n                setText(this.getHTML());\n                Registry.scan(this.view.dom);\n            },\n            onFocus: async () => {\n                // Note: ``this`` is the pattern instance.\n                utils.timeout(1); // short timeout to ensure focus class is set even if tiptap_blur_handler is called concurrently.\n                this.toolbar_el?.classList.add(\"tiptap-focus\");\n\n                // Set the current focused pat-tiptap instance on the toolbar element.\n                this.toolbar_el &&\n                    dom.set_data(this.toolbar_el, \"tiptap-instance\", this);\n            },\n            onBlur: () => {\n                // Note: ``this`` is the pattern instance.\n                this.toolbar_el?.classList.remove(\"tiptap-focus\");\n            },\n            autofocus: set_focus,\n        });\n        toolbar_ext.init_post({ app: this });\n    },\n});\n"],"names":["i","log","logging","parser","Parser","addArgument","addAlias","Base","name","trigger","init","toolbar_el","TipTap","Editor","ExtDocument","default","ExtParagraph","ExtText","focus_handler","options","parse","el","style","display","container","document","createElement","setAttribute","after","set_focus","classList","contains","hasAttribute","is_form_el","includes","tagName","getText","value","innerHTML","setText","text","dispatchEvent","events","configure","Gapcursor","History","extra_extensions","placeholder","getAttribute","Placeholder","push","mentionsMenu","factory","app","char","plural","url","tagsMenu","toolbarExternal","querySelector","TARGETS","toolbar_ext","toolbar","init_pre","init_extensions","this","getHTML","Registry","view","dom","utils","add","remove","element","extensions","content","onUpdate","onFocus","onBlur","autofocus","editor","init_post"],"sourceRoot":""}